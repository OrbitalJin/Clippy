{"_default": {"1": {"id": "b9825916-1598-457a-9c7f-51279655fd97", "type": "text", "content": "from PySide2.QtGui import *\nfrom PySide2.QtCore import *\nfrom PySide2.QtWidgets import *\n\nfrom ui.interface import Ui_MainWindow\nfrom components.scrollbar import CScrollBar\nfrom components.clipWidget import ClipWidget\n\nfrom utils.hotkeyWorker import HotKeyWorker\nfrom utils.clipWorker import ClipListener\nfrom utils.itemManager import ItemManager\n\nfrom tinydb import TinyDB, Query\nfrom datetime import datetime\nimport pyperclip as cliplib\nfrom pprint import pprint\nfrom uuid import uuid4\nimport sys, os\n\nif sys.platform in \"linux darwin\": host = \"*unix\"; import notify2\nelse: host = \"win32\"; from win10toast_click import ToastNotifier\nif host == \"win32\": winNotify = ToastNotifier()\nelse: notify2.init(\"ClipPy - Notifier\")\n\nPATH_TO_DB   = \"./data/db.json\"\nPATH_TO_ICON = \"../res/icons/icon_clipboard.svg\"\n\nclass App(QMainWindow):\n\tdef __init__(self):\n\t\tQMainWindow.__init__(self)\n\t\tself.ui = Ui_MainWindow()\n\t\tself.ui.setupUi(self)\n\t\tself.setupSystemTray()\n\t\tself.adjustUi()\n\n\t\tself.ClipListener = ClipListener()\n\t\tself.ClipListener.start()\n\n\t\tself.HotKeys = ['Ctrl+ALT+H', 'Ctrl+ALT+Z', 'Ctrl+ALT+C']\n\t\tself.HotKeyListener = HotKeyWorker(self.HotKeys)\n\t\tself.HotKeyListener.start()\n\n\t\tself.ItemManager = ItemManager(\"./data/db.json\", self)\n\t\tself.ItemManager.populateList()\n\n\t\tself.connectSignalsAndSlots()\n\t\tself.setupShortcuts()\n\t\tself.center()\n\n# Setup:\n\tdef adjustUi(self):\n\t\tself.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Popup)\n\t\tself.setWindowTitle(\"ClipPy\")\n\t\tself.setWindowOpacity(.95)\n\t\tself.setFocus()\n\t\tself.ui.searchBar.setFocus()\n\t\tself.ui.searchBar.setContextMenuPolicy(Qt.NoContextMenu)\n\t\tself.ui.clipsListWidget.setVerticalScrollBar(CScrollBar())\n\n\tdef setupShortcuts(self):\n\t\tQShortcut(QKeySequence('Ctrl+Q'), self).activated.connect(self.closeApp)\n\n\tdef setupSystemTray(self):\n\t\tself.TrayIcon = QSystemTrayIcon(QIcon(PATH_TO_ICON))\n\t\tself.TrayIcon.setToolTip(\"ClipPy\")\n\t\tself.TrayMenu = QMenu(self)\n\t\texitAction = self.TrayMenu.addAction(\"Exit\")\n\t\texitAction.triggered.connect(self.closeApp)\n\t\tshowAction = self.TrayMenu.addAction(\"Show\")\n\t\tshowAction.triggered.connect(self.show)\n\t\tshowAction.triggered.connect(self.ui.searchBar.setFocus)\n\t\tsettingsAction = self.TrayMenu.addAction(\"Settings\")\n\t\tself.TrayIcon.setContextMenu(self.TrayMenu)\n\t\tself.TrayIcon.show()\n\n\tdef connectSignalsAndSlots(self):\n\t\tself.ClipListener.newClipSignalEvent.connect(lambda clip: self.newClipEventSlot(clip))\n\t\tself.ClipListener.unavailableClipEvent.connect(lambda status: print(f\"ClipListener: {status}\"))\n\t\tself.HotKeyListener.combinationDetected.connect(lambda cmd: self.hotkeySlot(cmd))\n\n\t\tself.ui.clipsListWidget.itemActivated.connect(self.itemClipActivatedCallback)\n\t\tself.ui.searchBar.textChanged.connect(lambda text: self.filterClipboard(text))\n\t\tself.ui.searchBar.returnPressed.connect(lambda: self.ui.clipsListWidget.setFocus())\n\t\tself.ui.searchBar.returnPressed.connect(lambda: self.ui.clipsListWidget.setCurrentRow(0))\n\n\t\tself.ui.settingsBtn.clicked.connect(lambda: self.HotKeyListener.doWork())\n\t\tself.ui.closeAppBtn.clicked.connect(self.closeApp)\n\n# Slots:\n\t@Slot()\n\tdef newClipEventSlot(self, clip: str):\n\t\tnow = datetime.now()\n\t\tclipData = {\n\t\t\t\"id\": str(uuid4()),\n\t\t\t\"type\": \"text\",\n\t\t\t\"content\": clip,\n\t\t\t\"date\": now.strftime(\"%d/%m/%Y, %H:%M:%S\"),\n\t\t}\n\t\tpprint(clipData)\n\t\tself.ItemManager.newItem(clipData)\n\n\t@Slot()\n\tdef hotkeySlot(self, cmd: str):\n\t\tdef c():\n\t\t\tif not self.isVisible():self.center()\n\t\t\tself.setVisible(not self.isVisible())\n\n\t\tif cmd == \"h\": self.ui.clipsListWidget.clear()\n\t\tif cmd == \"z\": self.itemClipActivatedCallback(self.ui.clipsListWidget.item(1)) if self.ui.clipsListWidget.count() > 1 else None\n\t\tif cmd == \"c\": c()\n\n# Callbacks:\n\tdef itemClipActivatedCallback(self, item: QListWidgetItem):\n\t\tdef  sling_method():\n\t\t\tself.ui.statusLabel.setText(\"ClipPy v.0.1\")\n\t\t\tself.ui.statusLabel.setStyleSheet(\"color: grey;\")\n\n\t\ttxt = self.ui.clipsListWidget.itemWidget(item).getClipContent()\n\t\tcliplib.copy(txt)\n\t\tself.pushClipToDataBase(item.text())\n\t\tself.notify(\"ClipPy - Notifier\", f\"{item.text()} copied to the clipboard!\", 1000)\n\n\t\tself.ui.statusLabel.setStyleSheet(\"color: #5E81AC;\")\n\t\tself.ui.statusLabel.setText(f\"Entry copied to the clipboard!\")\n\t\tQTimer.singleShot(3500, sling_method)\n\t\tQTimer.singleShot(400, self.hide)\n\n\tdef itemClipSelectedCallback(self, item: QListWidgetItem):\n\t\tself.ui.clipsListWidget.setItemSelected(item, True)\n\n# Methods:\n\tdef removeClipWidgetItem(self, item: QListWidgetItem):\n\t\tindex = self.ui.clipsListWidget.indexFromItem(item).row()\n\t\titem = self.ui.clipsListWidget.takeItem(index)\n\n\tdef pushClipToDataBase(self, clip: str):\n\t\tpass\n\n\tdef filterClipboard(self, text: str):\n\t\tfor index in range(self.ui.clipsListWidget.count()):\n\t\t\titem = self.ui.clipsListWidget.item(index)\n\t\t\twidget = self.ui.clipsListWidget.itemWidget(item)\n\t\t\tcontent = widget.getClipContent()\n\t\t\titem.setHidden(not text.lower() in content.lower())\n\n\tdef notify(self, title: str, msg: str, timeout: int):\n\t\tif host == \"*unix\":\n\t\t\tnotification = notify2.Notification(summary = title, message = msg)\n\t\t\tnotification.set_timeout(timeout)\n\t\t\tnotification.show()\n\t\telse: winNotify.show_toast(title, msg, duration = int(timeout/1000), threaded = True)\n\n# Internal Events:\n\tdef hideEvent(self, event: QEvent):\n\t\tself.TrayIcon.show()\n\t\tprint(\"Hidden\")\n\n\tdef showEvent(self, event: QEvent):\n\t\tself.TrayIcon.hide()\n\t\tprint(\"Shown\")\n\n# Private:\n\tdef setRoundEdges(self):\n\t\tself.radius = 8.0\n\t\tself.path = QPainterPath()\n\t\tself.path.addRoundedRect(QRectF(self.rect()), self.radius, self.radius)\n\t\tself.mask = QRegion(self.path.toFillPolygon().toPolygon())\n\t\tself.setMask(self.mask)\n\t\n\tdef center(self):\n\t\tself.x_shift = 0 #-10\n\t\tself.y_shift = 0 #-360\n\t\tself.frame = self.frameGeometry()\n\t\tscreen = QGuiApplication.screenAt(QApplication.desktop().cursor().pos())\n\t\tcenterPoint = screen.availableGeometry().center()\n\t\tself.frame.moveCenter(centerPoint)\n\t\tself.move(self.frame.topLeft().x()+self.x_shift, self.frame.topLeft().y()+self.y_shift)\n\n\tdef stopRunningThreads(self):\n\t\tself.ClipListener.stop()\n\t\tself.ClipListener.quit()\n\t\tself.ClipListener.wait()\n\t\tself.HotKeyListener.stop()\n\t\tself.HotKeyListener.quit()\n\t\tself.HotKeyListener.wait()\n\t\tprint(\"ClipListener Thread: \", self.ClipListener.isRunning())\n\t\tprint(\"HotKeyListener Thread: \", self.HotKeyListener.isRunning())\n\n\tdef closeApp(self):\n\t\tself.setWindowFlags(self.windowFlags() & ~Qt.Popup) # Removing the popup flag because it prevents the app from fulling closing\n\t\tself.stopRunningThreads()\n\t\tself.close()\n\t\tsys.exit(0)\t\t\t\t\t\t\t\t\t\t\t# To fully close the application flagged as a popup\n\n# Entry Point:\ndef fontCheck(app):\n    font = QFont(\"Segoe UI\")\n    font.setPointSize(11)\n    if host == \"win32\": app.setFont(font)\n    elif host in \"linux darwin\": pass\n    return app\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    app = fontCheck(app)\n    window = App()\n    window.show()\n    sys.exit(app.exec_())\n", "date": "18/01/2023, 20:50:13"}, "2": {"id": "ad196118-ae0e-47dd-82d6-cd2cf26ee97f", "type": "text", "content": "from PySide2.QtGui import *\nfrom PySide2.QtCore import *\nfrom PySide2.QtWidgets import *\n\nfrom ui.interface import Ui_MainWindow\nfrom components.scrollbar import CScrollBar\nfrom components.clipWidget import ClipWidget\n\nfrom utils.hotkeyWorker import HotKeyWorker\nfrom utils.clipWorker import ClipListener\nfrom utils.itemManager import ItemManager\n\nfrom tinydb import TinyDB, Query\nfrom datetime import datetime\nimport pyperclip as cliplib\nfrom pprint import pprint\nfrom uuid import uuid4\nimport sys, os\n\nif sys.platform in \"linux darwin\": host = \"*unix\"; import notify2\nelse: host = \"win32\"; from win10toast_click import ToastNotifier\nif host == \"win32\": winNotify = ToastNotifier()\nelse: notify2.init(\"ClipPy - Notifier\")\n\nPATH_TO_DB   = \"./data/db.json\"\nPATH_TO_ICON = \"../res/icons/icon_clipboard.svg\"\n\nclass App(QMainWindow):\n\tdef __init__(self):\n\t\tQMainWindow.__init__(self)\n\t\tself.ui = Ui_MainWindow()\n\t\tself.ui.setupUi(self)\n\t\tself.setupSystemTray()\n\t\tself.adjustUi()\n\n\t\tself.ClipListener = ClipListener()\n\t\tself.ClipListener.start()\n\n\t\tself.HotKeys = ['Ctrl+ALT+H', 'Ctrl+ALT+Z', 'Ctrl+ALT+C']\n\t\tself.HotKeyListener = HotKeyWorker(self.HotKeys)\n\t\tself.HotKeyListener.start()\n\n\t\tself.ItemManager = ItemManager(\"./data/db.json\", self)\n\t\tself.ItemManager.populateList()\n\n\t\tself.connectSignalsAndSlots()\n\t\tself.setupShortcuts()\n\t\tself.center()\n\n# Setup:\n\tdef adjustUi(self):\n\t\tself.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Popup)\n\t\tself.setWindowTitle(\"ClipPy\")\n\t\tself.setWindowOpacity(.95)\n\t\tself.setFocus()\n\t\tself.ui.searchBar.setFocus()\n\t\tself.ui.searchBar.setContextMenuPolicy(Qt.NoContextMenu)\n\t\tself.ui.clipsListWidget.setVerticalScrollBar(CScrollBar())\n\n\tdef setupShortcuts(self):\n\t\tQShortcut(QKeySequence('Ctrl+Q'), self).activated.connect(self.closeApp)\n\n\tdef setupSystemTray(self):\n\t\tself.TrayIcon = QSystemTrayIcon(QIcon(PATH_TO_ICON))\n\t\tself.TrayIcon.setToolTip(\"ClipPy\")\n\t\tself.TrayMenu = QMenu(self)\n\t\texitAction = self.TrayMenu.addAction(\"Exit\")\n\t\texitAction.triggered.connect(self.closeApp)\n\t\tshowAction = self.TrayMenu.addAction(\"Show\")\n\t\tshowAction.triggered.connect(self.show)\n\t\tshowAction.triggered.connect(self.ui.searchBar.setFocus)\n\t\tsettingsAction = self.TrayMenu.addAction(\"Settings\")\n\t\tself.TrayIcon.setContextMenu(self.TrayMenu)\n\t\tself.TrayIcon.show()\n\n\tdef connectSignalsAndSlots(self):\n\t\tself.ClipListener.newClipSignalEvent.connect(lambda clip: self.newClipEventSlot(clip))\n\t\tself.ClipListener.unavailableClipEvent.connect(lambda status: print(f\"ClipListener: {status}\"))\n\t\tself.HotKeyListener.combinationDetected.connect(lambda cmd: self.hotkeySlot(cmd))\n\n\t\tself.ui.clipsListWidget.itemActivated.connect(self.itemClipActivatedCallback)\n\t\tself.ui.searchBar.textChanged.connect(lambda text: self.filterClipboard(text))\n\t\tself.ui.searchBar.returnPressed.connect(lambda: self.ui.clipsListWidget.setFocus())\n\t\tself.ui.searchBar.returnPressed.connect(lambda: self.ui.clipsListWidget.setCurrentRow(0))\n\n\t\tself.ui.settingsBtn.clicked.connect(lambda: self.HotKeyListener.doWork())\n\t\tself.ui.closeAppBtn.clicked.connect(self.closeApp)\n\n# Slots:\n\t@Slot()\n\tdef newClipEventSlot(self, clip: str):\n\t\tnow = datetime.now()\n\t\tclipData = {\n\t\t\t\"id\": str(uuid4()),\n\t\t\t\"type\": \"text\",\n\t\t\t\"content\": clip,\n\t\t\t\"date\": now.strftime(\"%d/%m/%Y, %H:%M:%S\"),\n\t\t}\n\t\tpprint(clipData)\n\t\tself.ItemManager.newItem(clipData)\n\n\t@Slot()\n\tdef hotkeySlot(self, cmd: str):\n\t\tdef c():\n\t\t\tif not self.isVisible():self.center()\n\t\t\tself.setVisible(not self.isVisible())\n\n\t\tif cmd == \"h\": self.ui.clipsListWidget.clear()\n\t\tif cmd == \"z\": self.itemClipActivatedCallback(self.ui.clipsListWidget.item(1)) if self.ui.clipsListWidget.count() > 1 else None\n\t\tif cmd == \"c\": c()\n\n# Callbacks:\n\tdef itemClipActivatedCallback(self, item: QListWidgetItem):\n\t\tdef  sling_method():\n\t\t\tself.ui.statusLabel.setText(\"ClipPy v.0.1\")\n\t\t\tself.ui.statusLabel.setStyleSheet(\"color: grey;\")\n\n\t\ttxt = self.ui.clipsListWidget.itemWidget(item).getClipContent()\n\t\tcliplib.copy(txt)\n\t\tself.pushClipToDataBase(item.text())\n\t\tself.notify(\"ClipPy - Notifier\", f\"{item.text()} copied to the clipboard!\", 1000)\n\n\t\tself.ui.statusLabel.setStyleSheet(\"color: #5E81AC;\")\n\t\tself.ui.statusLabel.setText(f\"Entry copied to the clipboard!\")\n\t\tQTimer.singleShot(3500, sling_method)\n\t\tQTimer.singleShot(400, self.hide)\n\n\tdef itemClipSelectedCallback(self, item: QListWidgetItem):\n\t\tself.ui.clipsListWidget.setItemSelected(item, True)\n\n# Methods:\n\tdef removeClipWidgetItem(self, item: QListWidgetItem):\n\t\tindex = self.ui.clipsListWidget.indexFromItem(item).row()\n\t\titem = self.ui.clipsListWidget.takeItem(index)\n\n\tdef pushClipToDataBase(self, clip: str):\n\t\tpass\n\n\tdef filterClipboard(self, text: str):\n\t\tfor index in range(self.ui.clipsListWidget.count()):\n\t\t\titem = self.ui.clipsListWidget.item(index)\n\t\t\twidget = self.ui.clipsListWidget.itemWidget(item)\n\t\t\tcontent = widget.getClipContent()\n\t\t\titem.setHidden(not text.lower() in content.lower())\n\n\tdef notify(self, title: str, msg: str, timeout: int):\n\t\tif host == \"*unix\":\n\t\t\tnotification = notify2.Notification(summary = title, message = msg)\n\t\t\tnotification.set_timeout(timeout)\n\t\t\tnotification.show()\n\t\telse: winNotify.show_toast(title, msg, duration = int(timeout/1000), threaded = True)\n\n# Internal Events:\n\tdef hideEvent(self, event: QEvent):\n\t\tself.TrayIcon.show()\n\t\tprint(\"Hidden\")\n\n\tdef showEvent(self, event: QEvent):\n\t\tself.TrayIcon.hide()\n\t\tprint(\"Shown\")\n\n# Private:\n\tdef setRoundEdges(self):\n\t\tself.radius = 8.0\n\t\tself.path = QPainterPath()\n\t\tself.path.addRoundedRect(QRectF(self.rect()), self.radius, self.radius)\n\t\tself.mask = QRegion(self.path.toFillPolygon().toPolygon())\n\t\tself.setMask(self.mask)\n\t\n\tdef center(self):\n\t\tself.x_shift = 0 #-10\n\t\tself.y_shift = 0 #-360\n\t\tself.frame = self.frameGeometry()\n\t\tscreen = QGuiApplication.screenAt(QApplication.desktop().cursor().pos())\n\t\tcenterPoint = screen.availableGeometry().center()\n\t\tself.frame.moveCenter(centerPoint)\n\t\tself.move(self.frame.topLeft().x()+self.x_shift, self.frame.topLeft().y()+self.y_shift)\n\n\tdef stopRunningThreads(self):\n\t\tself.ClipListener.stop()\n\t\tself.ClipListener.quit()\n\t\tself.ClipListener.wait()\n\t\tself.HotKeyListener.stop()\n\t\tself.HotKeyListener.quit()\n\t\tself.HotKeyListener.wait()\n\t\tprint(\"ClipListener Thread: \", self.ClipListener.isRunning())\n\t\tprint(\"HotKeyListener Thread: \", self.HotKeyListener.isRunning())\n\n\tdef closeApp(self):\n\t\tself.setWindowFlags(self.windowFlags() & ~Qt.Popup) # Removing the popup flag because it prevents the app from fulling closing\n\t\tself.stopRunningThreads()\n\t\tself.close()\n\t\tsys.exit(0)\t\t\t\t\t\t\t\t\t\t\t# To fully close the application flagged as a popup\n\n# Entry Point:\ndef fontCheck(app):\n    font = QFont(\"Segoe UI\")\n    font.setPointSize(11)\n    if host == \"win32\": app.setFont(font)\n    elif host in \"linux darwin\": pass\n    return app\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    app = fontCheck(app)\n    window = App()\n    window.show()\n    sys.exit(app.exec_())\n", "date": "18/01/2023, 20:52:24"}, "3": {"id": "4d676684-8007-4c1b-8b7d-b364ff5113a0", "type": "text", "content": "self.appendItem(clipData)", "date": "19/01/2023, 13:30:19"}, "4": {"id": "3dd58dde-6082-4a1d-888b-c5838ce80968", "type": "text", "content": "self._dataBase.remove(itemQuery.id == ID)", "date": "19/01/2023, 13:30:27"}, "5": {"id": "39ccbfae-f9a9-4d3f-be70-fd8daa0b43c5", "type": "text", "content": "removeClipWidgetItem(self, item: QListWidgetItem):", "date": "19/01/2023, 13:30:35"}, "6": {"id": "a145c623-40e7-4042-a450-8860e8bef714", "type": "text", "content": "from PySide2.QtGui import *\nfrom PySide2.QtCore import *\nfrom PySide2.QtWidgets import *\n\nfrom ui.interface import Ui_MainWindow\nfrom components.scrollbar import CScrollBar\nfrom components.clipWidget import ClipWidget\n\nfrom utils.hotkeyWorker import HotKeyWorker\nfrom utils.clipWorker import ClipListener\nfrom utils.itemManager import ItemManager\n\nfrom tinydb import TinyDB, Query\nfrom datetime import datetime\nimport pyperclip as cliplib\nfrom pprint import pprint\nfrom uuid import uuid4\nimport sys, os\n\nif sys.platform in \"linux darwin\": host = \"*unix\"; import notify2\nelse: host = \"win32\"; from win10toast_click import ToastNotifier\nif host == \"win32\": winNotify = ToastNotifier()\nelse: notify2.init(\"ClipPy - Notifier\")\n\nPATH_TO_DB   = \"./data/db.json\"\nPATH_TO_ICON = \"../res/icons/icon_clipboard.svg\"\n\nclass App(QMainWindow):\n\tdef __init__(self):\n\t\tQMainWindow.__init__(self)\n\t\tself.ui = Ui_MainWindow()\n\t\tself.ui.setupUi(self)\n\t\tself.setupSystemTray()\n\t\tself.adjustUi()\n\n\t\tself.ClipListener = ClipListener()\n\t\tself.ClipListener.start()\n\n\t\tself.HotKeys = ['Ctrl+ALT+H', 'Ctrl+ALT+Z', 'Ctrl+ALT+C']\n\t\tself.HotKeyListener = HotKeyWorker(self.HotKeys)\n\t\tself.HotKeyListener.start()\n\n\t\tself.ItemManager = ItemManager(\"./data/db.json\", self)\n\t\tself.ItemManager.populateList()\n\n\t\tself.connectSignalsAndSlots()\n\t\tself.setupShortcuts()\n\t\tself.center()\n\n# Setup:\n\tdef adjustUi(self):\n\t\tself.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Popup)\n\t\tself.setWindowTitle(\"ClipPy\")\n\t\tself.setWindowOpacity(.95)\n\t\tself.setFocus()\n\t\tself.ui.searchBar.setFocus()\n\t\tself.ui.searchBar.setContextMenuPolicy(Qt.NoContextMenu)\n\t\tself.ui.clipsListWidget.setVerticalScrollBar(CScrollBar())\n\n\tdef setupShortcuts(self):\n\t\tQShortcut(QKeySequence('Ctrl+Q'), self).activated.connect(self.closeApp)\n\n\tdef setupSystemTray(self):\n\t\tself.TrayIcon = QSystemTrayIcon(QIcon(PATH_TO_ICON))\n\t\tself.TrayIcon.setToolTip(\"ClipPy\")\n\t\tself.TrayMenu = QMenu(self)\n\t\texitAction = self.TrayMenu.addAction(\"Exit\")\n\t\texitAction.triggered.connect(self.closeApp)\n\t\tshowAction = self.TrayMenu.addAction(\"Show\")\n\t\tshowAction.triggered.connect(self.show)\n\t\tshowAction.triggered.connect(self.ui.searchBar.setFocus)\n\t\tsettingsAction = self.TrayMenu.addAction(\"Settings\")\n\t\tself.TrayIcon.setContextMenu(self.TrayMenu)\n\t\tself.TrayIcon.show()\n\n\tdef connectSignalsAndSlots(self):\n\t\tself.ClipListener.newClipSignalEvent.connect(lambda clip: self.newClipEventSlot(clip))\n\t\tself.ClipListener.unavailableClipEvent.connect(lambda status: print(f\"ClipListener: {status}\"))\n\t\tself.HotKeyListener.combinationDetected.connect(lambda cmd: self.hotkeySlot(cmd))\n\n\t\tself.ui.clipsListWidget.itemActivated.connect(self.itemClipActivatedCallback)\n\t\tself.ui.searchBar.textChanged.connect(lambda text: self.filterClipboard(text))\n\t\tself.ui.searchBar.returnPressed.connect(lambda: self.ui.clipsListWidget.setFocus())\n\t\tself.ui.searchBar.returnPressed.connect(lambda: self.ui.clipsListWidget.setCurrentRow(0))\n\n\t\tself.ui.settingsBtn.clicked.connect(lambda: self.HotKeyListener.doWork())\n\t\tself.ui.closeAppBtn.clicked.connect(self.closeApp)\n\n# Slots:\n\t@Slot()\n\tdef newClipEventSlot(self, clip: str):\n\t\tnow = datetime.now()\n\t\tclipData = {\n\t\t\t\"id\": str(uuid4()),\n\t\t\t\"type\": \"text\",\n\t\t\t\"content\": clip,\n\t\t\t\"date\": now.strftime(\"%d/%m/%Y, %H:%M:%S\"),\n\t\t}\n\t\tpprint(clipData)\n\t\tself.ItemManager.newItem(clipData)\n\n\t@Slot()\n\tdef hotkeySlot(self, cmd: str):\n\t\tdef c():\n\t\t\tif not self.isVisible():self.center()\n\t\t\tself.setVisible(not self.isVisible())\n\n\t\tif cmd == \"h\": self.ui.clipsListWidget.clear()\n\t\tif cmd == \"z\": self.itemClipActivatedCallback(self.ui.clipsListWidget.item(1)) if self.ui.clipsListWidget.count() > 1 else None\n\t\tif cmd == \"c\": c()\n\n# Callbacks:\n\tdef itemClipActivatedCallback(self, item: QListWidgetItem):\n\t\tdef  sling_method():\n\t\t\tself.ui.statusLabel.setText(\"ClipPy v.0.1\")\n\t\t\tself.ui.statusLabel.setStyleSheet(\"color: grey;\")\n\n\t\ttxt = self.ui.clipsListWidget.itemWidget(item).getClipContent()\n\t\tcliplib.copy(txt)\n\t\tself.pushClipToDataBase(item.text())\n\t\tself.notify(\"ClipPy - Notifier\", f\"{item.text()} copied to the clipboard!\", 1000)\n\n\t\tself.ui.statusLabel.setStyleSheet(\"color: #5E81AC;\")\n\t\tself.ui.statusLabel.setText(f\"Entry copied to the clipboard!\")\n\t\tQTimer.singleShot(3500, sling_method)\n\t\tQTimer.singleShot(400, self.hide)\n\n\tdef itemClipSelectedCallback(self, item: QListWidgetItem):\n\t\tself.ui.clipsListWidget.setItemSelected(item, True)\n\n# Methods:\n\tdef removeClipWidgetItem(self, item: QListWidgetItem):\n\t\tindex = self.ui.clipsListWidget.indexFromItem(item).row()\n\t\titem = self.ui.clipsListWidget.takeItem(index)\n\n\tdef pushClipToDataBase(self, clip: str):\n\t\tpass\n\n\tdef filterClipboard(self, text: str):\n\t\tfor index in range(self.ui.clipsListWidget.count()):\n\t\t\titem = self.ui.clipsListWidget.item(index)\n\t\t\twidget = self.ui.clipsListWidget.itemWidget(item)\n\t\t\tcontent = widget.getClipContent()\n\t\t\titem.setHidden(not text.lower() in content.lower())\n\n\tdef notify(self, title: str, msg: str, timeout: int):\n\t\tif host == \"*unix\":\n\t\t\tnotification = notify2.Notification(summary = title, message = msg)\n\t\t\tnotification.set_timeout(timeout)\n\t\t\tnotification.show()\n\t\telse: winNotify.show_toast(title, msg, duration = int(timeout/1000), threaded = True)\n\n# Internal Events:\n\tdef hideEvent(self, event: QEvent):\n\t\tself.TrayIcon.show()\n\t\tprint(\"Hidden\")\n\n\tdef showEvent(self, event: QEvent):\n\t\tself.TrayIcon.hide()\n\t\tprint(\"Shown\")\n\n# Private:\n\tdef setRoundEdges(self):\n\t\tself.radius = 8.0\n\t\tself.path = QPainterPath()\n\t\tself.path.addRoundedRect(QRectF(self.rect()), self.radius, self.radius)\n\t\tself.mask = QRegion(self.path.toFillPolygon().toPolygon())\n\t\tself.setMask(self.mask)\n\t\n\tdef center(self):\n\t\tself.x_shift = 0 #-10\n\t\tself.y_shift = 0 #-360\n\t\tself.frame = self.frameGeometry()\n\t\tscreen = QGuiApplication.screenAt(QApplication.desktop().cursor().pos())\n\t\tcenterPoint = screen.availableGeometry().center()\n\t\tself.frame.moveCenter(centerPoint)\n\t\tself.move(self.frame.topLeft().x()+self.x_shift, self.frame.topLeft().y()+self.y_shift)\n\n\tdef stopRunningThreads(self):\n\t\tself.ClipListener.stop()\n\t\tself.ClipListener.quit()\n\t\tself.ClipListener.wait()\n\t\tself.HotKeyListener.stop()\n\t\tself.HotKeyListener.quit()\n\t\tself.HotKeyListener.wait()\n\t\tprint(\"ClipListener Thread: \", self.ClipListener.isRunning())\n\t\tprint(\"HotKeyListener Thread: \", self.HotKeyListener.isRunning())\n\n\tdef closeApp(self):\n\t\tself.setWindowFlags(self.windowFlags() & ~Qt.Popup) # Removing the popup flag because it prevents the app from fulling closing\n\t\tself.stopRunningThreads()\n\t\tself.close()\n\t\tsys.exit(0)\t\t\t\t\t\t\t\t\t\t\t# To fully close the application flagged as a popup\n\n# Entry Point:\ndef fontCheck(app):\n    font = QFont(\"Segoe UI\")\n    font.setPointSize(11)\n    if host == \"win32\": app.setFont(font)\n    elif host in \"linux darwin\": pass\n    return app\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    app = fontCheck(app)\n    window = App()\n    window.show()\n    sys.exit(app.exec_())\n", "date": "19/01/2023, 14:08:39"}, "7": {"id": "d9002c64-a88d-439d-b162-e4fcfb172de2", "type": "text", "content": "\t\tQShortcut(QKeySequence('Ctrl+Q'), self).activated.connect(self.closeApp)\n", "date": "19/01/2023, 15:30:25"}, "8": {"id": "c1ff2f94-df50-4d05-b838-d3ca704750d4", "type": "text", "content": "QtCore.Qt.Key_Up", "date": "19/01/2023, 15:31:38"}, "37": {"id": "9713fcb9-ccee-40b7-94cc-805eb53c7f97", "type": "text", "content": "# -*- coding: utf-8 -*-\n\n################################################################################\n## Form generated from reading UI file 'newInterfaceabWHmK.ui'\n##\n## Created by: Qt User Interface Compiler version 5.15.7\n##\n## WARNING! All changes made in this file will be lost when recompiling UI file!\n################################################################################\n\nfrom PySide2.QtCore import *  # type: ignore\nfrom PySide2.QtGui import *  # type: ignore\nfrom PySide2.QtWidgets import *  # type: ignore\n\nimport res_rc\n\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        if not MainWindow.objectName():\n            MainWindow.setObjectName(u\"MainWindow\")\n        MainWindow.resize(480, 250)\n        self.centralwidget = QWidget(MainWindow)\n        self.centralwidget.setObjectName(u\"centralwidget\")\n        self.centralwidget.setStyleSheet(u\"border: none;\")\n        self.verticalLayout = QVBoxLayout(self.centralwidget)\n        self.verticalLayout.setSpacing(0)\n        self.verticalLayout.setObjectName(u\"verticalLayout\")\n        self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n        self.mainFrame = QFrame(self.centralwidget)\n        self.mainFrame.setObjectName(u\"mainFrame\")\n        self.mainFrame.setStyleSheet(u\"/*Globals*/\\n\"\n\"QLabel{\\n\"\n\"\tfont: 9pt \\\"JetBrains Mono\\\";\\n\"\n\"\tcolor: grey;\\n\"\n\"}\\n\"\n\"\\n\"\n\"/*Frames*/\\n\"\n\"#mainFrame{\\n\"\n\"\tfont: 9pt \\\"JetBrains Mono\\\";\\n\"\n\"\tbackground-color:  #2F343F;\\n\"\n\"}\\n\"\n\"\\n\"\n\"/*Objects*/\\n\"\n\"#searchBar{\\n\"\n\"\tbackground-color: #262A32;\\n\"\n\"\tborder-radius: 5px;\\n\"\n\"\tcolor:  #A0A0A0;\\n\"\n\"}\\n\"\n\"\\n\"\n\"#settingsBtn{\\n\"\n\"\timage: url(:/Icons/icons/icon_settings.png);\\n\"\n\"\tbackground-color: transparent;\\n\"\n\"\tborder: none;\\n\"\n\"}\\n\"\n\"\\n\"\n\"#clipsListWidget{\\n\"\n\"\tbackground-color: transparent;\\n\"\n\"\tcolor:  #A0A0A0;\\n\"\n\"}\\\\\\n\"\n\"\\n\"\n\"\\n\"\n\"\\n\"\n\"\\n\"\n\"\")\n        self.mainFrame.setFrameShape(QFrame.StyledPanel)\n        self.mainFrame.setFrameShadow(QFrame.Raised)\n        self.verticalLayout_2 = QVBoxLayout(self.mainFrame)\n        self.verticalLayout_2.setSpacing(0)\n        self.verticalLayout_2.setObjectName(u\"verticalLayout_2\")\n        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)\n        self.searchBarFrame = QFrame(self.mainFrame)\n        self.searchBarFrame.setObjectName(u\"searchBarFrame\")\n        self.searchBarFrame.setMinimumSize(QSize(0, 35))\n        self.searchBarFrame.setMaximumSize(QSize(16777215, 35))\n        self.searchBarFrame.setStyleSheet(u\"#searchBarFrame{\\n\"\n\"\tbackground-color: #536D79;\\n\"\n\"}\")\n        self.searchBarFrame.setFrameShape(QFrame.StyledPanel)\n        self.searchBarFrame.setFrameShadow(QFrame.Raised)\n        self.horizontalLayout = QHBoxLayout(self.searchBarFrame)\n        self.horizontalLayout.setSpacing(6)\n        self.horizontalLayout.setObjectName(u\"horizontalLayout\")\n        self.horizontalLayout.setContentsMargins(6, 0, 0, 0)\n        self.magnifiyingGlassLabel = QLabel(self.searchBarFrame)\n        self.magnifiyingGlassLabel.setObjectName(u\"magnifiyingGlassLabel\")\n        self.magnifiyingGlassLabel.setMinimumSize(QSize(15, 0))\n        self.magnifiyingGlassLabel.setMaximumSize(QSize(15, 16777215))\n        self.magnifiyingGlassLabel.setStyleSheet(u\"image: url(:/Icons/icons/icon_magnifying.png);\\n\"\n\"color: #E1E4E7;\")\n\n        self.horizontalLayout.addWidget(self.magnifiyingGlassLabel, 0, Qt.AlignLeft)\n\n        self.searchBar = QLineEdit(self.searchBarFrame)\n        self.searchBar.setObjectName(u\"searchBar\")\n        self.searchBar.setMinimumSize(QSize(400, 28))\n        self.searchBar.setMaximumSize(QSize(600, 28))\n        self.searchBar.setStyleSheet(u\"QLineEdit{\\n\"\n\"\tbackground-color: transparent;\\n\"\n\"\tselection-background-color: #4C566A;\\n\"\n\"\tfont: 9pt \\\"JetBrains Mono\\\";\\n\"\n\"}\")\n        self.searchBar.setAlignment(Qt.AlignLeading|Qt.AlignLeft|Qt.AlignVCenter)\n\n        self.horizontalLayout.addWidget(self.searchBar)\n\n        self.horizontalSpacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)\n\n        self.horizontalLayout.addItem(self.horizontalSpacer)\n\n\n        self.verticalLayout_2.addWidget(self.searchBarFrame)\n\n        self.displayFrame = QFrame(self.mainFrame)\n        self.displayFrame.setObjectName(u\"displayFrame\")\n        self.displayFrame.setFrameShape(QFrame.StyledPanel)\n        self.displayFrame.setFrameShadow(QFrame.Raised)\n        self.horizontalLayout_3 = QHBoxLayout(self.displayFrame)\n        self.horizontalLayout_3.setSpacing(0)\n        self.horizontalLayout_3.setObjectName(u\"horizontalLayout_3\")\n        self.horizontalLayout_3.setContentsMargins(6, 6, 6, 6)\n        self.clipsListWidget = QListWidget(self.displayFrame)\n        self.clipsListWidget.setObjectName(u\"clipsListWidget\")\n        self.clipsListWidget.setMaximumSize(QSize(16777215, 16777215))\n        self.clipsListWidget.setStyleSheet(u\"QListView::item:selected{\\n\"\n\"\tfont: 9pt \\\"JetBrains Mono\\\";\\n\"\n\"\tbackground-color:  rgba(76, 86, 106, 125);\\n\"\n\"}\\n\"\n\"\")\n\n        self.horizontalLayout_3.addWidget(self.clipsListWidget)\n\n\n        self.verticalLayout_2.addWidget(self.displayFrame)\n\n        self.bottomFrame = QFrame(self.mainFrame)\n        self.bottomFrame.setObjectName(u\"bottomFrame\")\n        self.bottomFrame.setMinimumSize(QSize(25, 15))\n        self.bottomFrame.setMaximumSize(QSize(1000000, 15))\n        self.bottomFrame.setStyleSheet(u\"\")\n        self.bottomFrame.setFrameShape(QFrame.StyledPanel)\n        self.bottomFrame.setFrameShadow(QFrame.Raised)\n        self.horizontalLayout_2 = QHBoxLayout(self.bottomFrame)\n        self.horizontalLayout_2.setObjectName(u\"horizontalLayout_2\")\n        self.horizontalLayout_2.setContentsMargins(0, 0, 3, 3)\n        self.horizontalSpacer_2 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)\n\n        self.horizontalLayout_2.addItem(self.horizontalSpacer_2)\n\n        self.settingsBtn = QPushButton(self.bottomFrame)\n        self.settingsBtn.setObjectName(u\"settingsBtn\")\n        self.settingsBtn.setMinimumSize(QSize(15, 15))\n        self.settingsBtn.setMaximumSize(QSize(15, 15))\n        self.settingsBtn.setCursor(QCursor(Qt.PointingHandCursor))\n\n        self.horizontalLayout_2.addWidget(self.settingsBtn)\n\n\n        self.verticalLayout_2.addWidget(self.bottomFrame)\n\n\n        self.verticalLayout.addWidget(self.mainFrame)\n\n        MainWindow.setCentralWidget(self.centralwidget)\n\n        self.retranslateUi(MainWindow)\n\n        QMetaObject.connectSlotsByName(MainWindow)\n    # setupUi\n\n    def retranslateUi(self, MainWindow):\n        MainWindow.setWindowTitle(QCoreApplication.translate(\"MainWindow\", u\"MainWindow\", None))\n        self.magnifiyingGlassLabel.setText(\"\")\n        self.searchBar.setPlaceholderText(QCoreApplication.translate(\"MainWindow\", u\"Search...\", None))\n        self.settingsBtn.setText(\"\")\n    # retranslateUi\n\n", "date": "19/01/2023, 23:07:21"}, "38": {"id": "af38a424-c283-47ec-ad68-b62c417e8664", "type": "text", "content": "\tdef itemClipSelectedCallback(self, item: QListWidgetItem):\n", "date": "19/01/2023, 23:18:04"}, "39": {"id": "4cc51765-4473-4c8d-acea-ab3474a741cb", "type": "text", "content": "\t\tself.ui.clipsListWidget.setItemSelected(item, True)\n", "date": "19/01/2023, 23:18:04"}, "40": {"id": "42e69a77-e068-44fd-b10e-e7fddcb35ea2", "type": "text", "content": "item = self.ui.clipsListWidget.item(index)\n\t\t\twidget = self.ui.clipsListWidget.itemWidget(item)\n\t\t\tcontent = widget.getClipContent()", "date": "19/01/2023, 23:19:23"}, "41": {"id": "46d62c5e-0d28-4f2b-b787-2bc81fa9876c", "type": "text", "content": "\t\titem = self.ui.clipsListWidget.item(index)\n", "date": "19/01/2023, 23:19:45"}, "42": {"id": "ea51473d-e273-4468-8aab-840d7247bbc0", "type": "text", "content": "\t\t\twidget = self.ui.clipsListWidget.itemWidget(item)\n", "date": "19/01/2023, 23:20:16"}, "43": {"id": "9226574c-f41c-4561-873e-343064123e33", "type": "text", "content": "self.ItemManager.getItemContent(item)", "date": "19/01/2023, 23:20:42"}, "44": {"id": "f1ce4cdc-5fe4-4b4f-8b57-e614734eb087", "type": "text", "content": "incrementListIndex", "date": "20/01/2023, 01:27:36"}, "45": {"id": "d47d4bf4-a92f-4812-9c03-09278f7d30a7", "type": "text", "content": "currentIndex - 1", "date": "20/01/2023, 01:28:15"}, "46": {"id": "ad8c3a20-af6f-4ca8-8d65-3c1651f9dc6f", "type": "text", "content": "self.ui.clipsListWidget.cout()", "date": "20/01/2023, 01:28:43"}, "47": {"id": "dde54ab0-7bd1-43fc-9080-2060dde5fdda", "type": "text", "content": "def incrementListIndex(self):\n\t\tcurrentIndex = self.ui.clipsListWidget.currentIndex()\n\t\titemCount = self.ui.clipsListWidget.cout()\n\t\tnextIndex = (currentIndex - 1) % itemCount\n\t\tself.ui.clipsListWidget.setCurrentRow(nextIndex)", "date": "20/01/2023, 01:29:02"}, "48": {"id": "1e673439-a2c4-4977-bbf2-ad1cba5134bb", "type": "text", "content": "incrementListIndex", "date": "20/01/2023, 01:29:30"}, "50": {"id": "0b6de32a-d892-425b-9add-cb060cb81abe", "type": "text", "content": "itemCount", "date": "20/01/2023, 01:31:50"}, "51": {"id": "f967caee-aff6-4af7-9e30-9e1e03161ded", "type": "text", "content": "currentIndex", "date": "20/01/2023, 01:32:15"}, "52": {"id": "ea4a0879-5354-4880-b8fa-6eb4a3a48bcc", "type": "text", "content": "\t\tprint(currentIndex, type(currentIndex))\n", "date": "20/01/2023, 01:33:10"}, "53": {"id": "7161e43e-932a-41d1-953c-acdd3c138ff7", "type": "text", "content": "\t\tprint(currentIndex, type(currentIndex))\n", "date": "20/01/2023, 01:33:20"}, "55": {"id": "d727c240-5bb8-4c9d-8fe8-3d4fce2cbaa4", "type": "text", "content": "\t\t\titem.setEn(not text.lower() in content.lower())\n", "date": "20/01/2023, 01:39:34"}, "56": {"id": "a9b85bb9-a0cf-4fc3-85b8-56ec877071e8", "type": "text", "content": "# -*- coding: utf-8 -*-\n\n################################################################################\n## Form generated from reading UI file 'newInterfaceHGFsLx.ui'\n##\n## Created by: Qt User Interface Compiler version 5.15.7\n##\n## WARNING! All changes made in this file will be lost when recompiling UI file!\n################################################################################\n\nfrom PySide2.QtCore import *  # type: ignore\nfrom PySide2.QtGui import *  # type: ignore\nfrom PySide2.QtWidgets import *  # type: ignore\n\nimport res_rc\n\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        if not MainWindow.objectName():\n            MainWindow.setObjectName(u\"MainWindow\")\n        MainWindow.resize(500, 300)\n        self.centralwidget = QWidget(MainWindow)\n        self.centralwidget.setObjectName(u\"centralwidget\")\n        self.centralwidget.setStyleSheet(u\"border: none;\")\n        self.verticalLayout = QVBoxLayout(self.centralwidget)\n        self.verticalLayout.setSpacing(0)\n        self.verticalLayout.setObjectName(u\"verticalLayout\")\n        self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n        self.mainFrame = QFrame(self.centralwidget)\n        self.mainFrame.setObjectName(u\"mainFrame\")\n        self.mainFrame.setStyleSheet(u\"/*Globals*/\\n\"\n\"QLabel{\\n\"\n\"\tfont: 9pt \\\"JetBrains Mono\\\";\\n\"\n\"\tcolor: grey;\\n\"\n\"}\\n\"\n\"\\n\"\n\"/*Frames*/\\n\"\n\"#mainFrame{\\n\"\n\"\tfont: 9pt \\\"JetBrains Mono\\\";\\n\"\n\"\tbackground-color:  #2F343F;\\n\"\n\"}\\n\"\n\"\\n\"\n\"/*Objects*/\\n\"\n\"#searchBar{\\n\"\n\"\tbackground-color: #262A32;\\n\"\n\"\tborder-radius: 5px;\\n\"\n\"\tcolor:  #A0A0A0;\\n\"\n\"}\\n\"\n\"\\n\"\n\"#settingsBtn{\\n\"\n\"\timage: url(:/Icons/icons/icon_settings.png);\\n\"\n\"\tbackground-color: transparent;\\n\"\n\"\tborder: none;\\n\"\n\"}\\n\"\n\"\\n\"\n\"#clipsListWidget{\\n\"\n\"\tbackground-color: transparent;\\n\"\n\"\tcolor:  #A0A0A0;\\n\"\n\"}\\\\\\n\"\n\"\\n\"\n\"\\n\"\n\"\\n\"\n\"\\n\"\n\"\")\n        self.mainFrame.setFrameShape(QFrame.StyledPanel)\n        self.mainFrame.setFrameShadow(QFrame.Raised)\n        self.verticalLayout_2 = QVBoxLayout(self.mainFrame)\n        self.verticalLayout_2.setSpacing(0)\n        self.verticalLayout_2.setObjectName(u\"verticalLayout_2\")\n        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)\n        self.searchBarFrame = QFrame(self.mainFrame)\n        self.searchBarFrame.setObjectName(u\"searchBarFrame\")\n        self.searchBarFrame.setMinimumSize(QSize(0, 35))\n        self.searchBarFrame.setMaximumSize(QSize(16777215, 35))\n        self.searchBarFrame.setStyleSheet(u\"#searchBarFrame{\\n\"\n\"\tbackground-color: #536D79;\\n\"\n\"}\")\n        self.searchBarFrame.setFrameShape(QFrame.StyledPanel)\n        self.searchBarFrame.setFrameShadow(QFrame.Raised)\n        self.horizontalLayout = QHBoxLayout(self.searchBarFrame)\n        self.horizontalLayout.setSpacing(6)\n        self.horizontalLayout.setObjectName(u\"horizontalLayout\")\n        self.horizontalLayout.setContentsMargins(6, 0, 0, 0)\n        self.magnifiyingGlassLabel = QLabel(self.searchBarFrame)\n        self.magnifiyingGlassLabel.setObjectName(u\"magnifiyingGlassLabel\")\n        self.magnifiyingGlassLabel.setMinimumSize(QSize(15, 0))\n        self.magnifiyingGlassLabel.setMaximumSize(QSize(15, 16777215))\n        self.magnifiyingGlassLabel.setStyleSheet(u\"image: url(:/Icons/icons/icon_magnifying.png);\\n\"\n\"color: #E1E4E7;\")\n\n        self.horizontalLayout.addWidget(self.magnifiyingGlassLabel, 0, Qt.AlignLeft)\n\n        self.searchBar = QLineEdit(self.searchBarFrame)\n        self.searchBar.setObjectName(u\"searchBar\")\n        self.searchBar.setMinimumSize(QSize(400, 28))\n        self.searchBar.setMaximumSize(QSize(600, 28))\n        self.searchBar.setStyleSheet(u\"QLineEdit{\\n\"\n\"\tbackground-color: transparent;\\n\"\n\"\tselection-background-color: #4C566A;\\n\"\n\"\tfont: 9pt \\\"JetBrains Mono\\\";\\n\"\n\"}\")\n        self.searchBar.setAlignment(Qt.AlignLeading|Qt.AlignLeft|Qt.AlignVCenter)\n\n        self.horizontalLayout.addWidget(self.searchBar)\n\n        self.horizontalSpacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)\n\n        self.horizontalLayout.addItem(self.horizontalSpacer)\n\n\n        self.verticalLayout_2.addWidget(self.searchBarFrame)\n\n        self.displayFrame = QFrame(self.mainFrame)\n        self.displayFrame.setObjectName(u\"displayFrame\")\n        self.displayFrame.setFrameShape(QFrame.StyledPanel)\n        self.displayFrame.setFrameShadow(QFrame.Raised)\n        self.horizontalLayout_3 = QHBoxLayout(self.displayFrame)\n        self.horizontalLayout_3.setSpacing(0)\n        self.horizontalLayout_3.setObjectName(u\"horizontalLayout_3\")\n        self.horizontalLayout_3.setContentsMargins(6, 6, 6, 6)\n        self.clipsListWidget = QListWidget(self.displayFrame)\n        self.clipsListWidget.setObjectName(u\"clipsListWidget\")\n        self.clipsListWidget.setMaximumSize(QSize(16777215, 16777215))\n        self.clipsListWidget.setStyleSheet(u\"QListView::item:selected{\\n\"\n\"\tfont: 9pt \\\"JetBrains Mono\\\";\\n\"\n\"\tbackground-color:  rgba(76, 86, 106, 125);\\n\"\n\"}\\n\"\n\"\")\n\n        self.horizontalLayout_3.addWidget(self.clipsListWidget)\n\n\n        self.verticalLayout_2.addWidget(self.displayFrame)\n\n        self.bottomFrame = QFrame(self.mainFrame)\n        self.bottomFrame.setObjectName(u\"bottomFrame\")\n        self.bottomFrame.setMinimumSize(QSize(25, 15))\n        self.bottomFrame.setMaximumSize(QSize(1000000, 15))\n        self.bottomFrame.setStyleSheet(u\"\")\n        self.bottomFrame.setFrameShape(QFrame.StyledPanel)\n        self.bottomFrame.setFrameShadow(QFrame.Raised)\n        self.horizontalLayout_2 = QHBoxLayout(self.bottomFrame)\n        self.horizontalLayout_2.setObjectName(u\"horizontalLayout_2\")\n        self.horizontalLayout_2.setContentsMargins(0, 0, 3, 3)\n        self.horizontalSpacer_2 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)\n\n        self.horizontalLayout_2.addItem(self.horizontalSpacer_2)\n\n        self.settingsBtn = QPushButton(self.bottomFrame)\n        self.settingsBtn.setObjectName(u\"settingsBtn\")\n        self.settingsBtn.setMinimumSize(QSize(15, 15))\n        self.settingsBtn.setMaximumSize(QSize(15, 15))\n        self.settingsBtn.setCursor(QCursor(Qt.PointingHandCursor))\n\n        self.horizontalLayout_2.addWidget(self.settingsBtn)\n\n\n        self.verticalLayout_2.addWidget(self.bottomFrame)\n\n\n        self.verticalLayout.addWidget(self.mainFrame)\n\n        MainWindow.setCentralWidget(self.centralwidget)\n\n        self.retranslateUi(MainWindow)\n\n        QMetaObject.connectSlotsByName(MainWindow)\n    # setupUi\n\n    def retranslateUi(self, MainWindow):\n        MainWindow.setWindowTitle(QCoreApplication.translate(\"MainWindow\", u\"MainWindow\", None))\n        self.magnifiyingGlassLabel.setText(\"\")\n        self.searchBar.setPlaceholderText(QCoreApplication.translate(\"MainWindow\", u\"Search...\", None))\n        self.settingsBtn.setText(\"\")\n    # retranslateUi\n\n", "date": "20/01/2023, 01:46:46"}, "58": {"id": "36dd07df-01dc-4781-b343-fa7c673d60ad", "type": "text", "content": "#BFC5D0", "date": "20/01/2023, 01:49:33"}, "59": {"id": "108d02fa-4f71-452c-aae6-7075a1bb0257", "type": "text", "content": "#4B555E", "date": "20/01/2023, 01:50:01"}, "60": {"id": "ec478300-62d5-4cf7-a8fc-3625f7d734e4", "type": "text", "content": "#4C566A", "date": "20/01/2023, 01:50:21"}, "61": {"id": "59babe16-d588-45d7-b6b3-53ebd9f05870", "type": "text", "content": "#8F8F8F", "date": "20/01/2023, 01:50:44"}, "62": {"id": "0f15df0c-ea0f-4ccd-8820-b5f09644d662", "type": "text", "content": "verticalScrollBar", "date": "20/01/2023, 01:52:10"}, "63": {"id": "4b5c9174-13d3-4a61-b7a9-1c0f928ea665", "type": "text", "content": "\t\tprint(itemCount)\n", "date": "20/01/2023, 01:52:53"}, "64": {"id": "58066962-91a0-499a-90d9-838cbca15840", "type": "text", "content": "currentItem = self._parent.ui.clipsListWidget.currentItem()\n\t\tindex = (items.index(currentItem) + 1) % len(items)\n\t\tself._parent.ui.clipsListWidget.setCurrentItem(items[index])", "date": "20/01/2023, 02:18:36"}, "65": {"id": "a2078cd0-090f-481c-aaca-fcfaf868e9b6", "type": "text", "content": "\t\titems = self.getVisibleItems()\n", "date": "20/01/2023, 02:18:41"}, "66": {"id": "65021548-5f81-4537-8916-1bfe0d3a9227", "type": "text", "content": "\t\tcurrentItem = self._parent.ui.clipsListWidget.currentItem()\n", "date": "20/01/2023, 02:18:48"}, "67": {"id": "4d54d42b-c7b8-49d1-9e7e-69e93994ec25", "type": "text", "content": "\t\tindex = (items.index(currentItem) + 1) % len(items)\n", "date": "20/01/2023, 02:18:49"}, "68": {"id": "d1f498cf-49b7-4595-aa35-254705279f40", "type": "text", "content": "if currentItem ", "date": "20/01/2023, 02:23:21"}, "69": {"id": "c5f8c5d6-b25b-4c7d-90e8-f419e4b518e8", "type": "text", "content": "gotToFirstVisibleItem", "date": "20/01/2023, 02:46:53"}, "70": {"id": "9a2e69f2-062b-4960-ae61-6f1498a40115", "type": "text", "content": "\t\titems = self.getVisibleItems()\n", "date": "20/01/2023, 02:49:04"}, "71": {"id": "8670be47-c03f-4656-8daf-052a7f9e7810", "type": "text", "content": "gotToFirstVisibleItem", "date": "20/01/2023, 02:49:10"}, "72": {"id": "2bbd74e7-f3e1-48cf-a034-ed4a5282b1fc", "type": "text", "content": "\t\tindex = (items.index(currentItem) + 1) % len(items)\n", "date": "20/01/2023, 02:49:19"}, "73": {"id": "bebeb1be-58fb-4c6b-8690-8e017d150f53", "type": "text", "content": "\t\tcliplib.copy(content)\n", "date": "20/01/2023, 02:49:39"}, "74": {"id": "80d24084-5c5c-4ef0-891f-44e8f0094a85", "type": "text", "content": "\tdef keyPressEvent(self, event):\n", "date": "20/01/2023, 02:50:09"}, "75": {"id": "438c202f-3455-41c8-9463-3c2520e97407", "type": "text", "content": "\t\tsuper(App, self).keyPressEvent(event)\n", "date": "20/01/2023, 02:50:09"}, "76": {"id": "8b24bf1d-fa28-4c04-b829-fdabc7c37070", "type": "text", "content": "\t\tprint(event.key())\n", "date": "20/01/2023, 02:50:10"}, "77": {"id": "1c8f39ba-8cc8-4eb3-b661-36c8c9f34583", "type": "text", "content": "\t\tindex = (items.index(currentItem) + 1) % len(items)\n", "date": "20/01/2023, 02:50:19"}, "78": {"id": "1376e805-2012-4f68-b3e8-8e5c26b8395d", "type": "text", "content": "\t\tindex = (items.index(currentItem) + 1) % len(items)\n", "date": "20/01/2023, 02:50:25"}, "79": {"id": "092f5aa8-3253-40bc-873b-7b74cf3af6e7", "type": "text", "content": "\t\tcliplib.copy(content)\n", "date": "20/01/2023, 02:50:27"}, "80": {"id": "4a6380ba-28aa-4e7d-97b1-10f077c53d06", "type": "text", "content": "# -*- coding: utf-8 -*-\n\n################################################################################\n## Form generated from reading UI file 'alternateInterfaceGvPEGe.ui'\n##\n## Created by: Qt User Interface Compiler version 5.15.7\n##\n## WARNING! All changes made in this file will be lost when recompiling UI file!\n################################################################################\n\nfrom PySide2.QtCore import *  # type: ignore\nfrom PySide2.QtGui import *  # type: ignore\nfrom PySide2.QtWidgets import *  # type: ignore\n\nimport res_rc\n\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        if not MainWindow.objectName():\n            MainWindow.setObjectName(u\"MainWindow\")\n        MainWindow.resize(480, 250)\n        self.centralwidget = QWidget(MainWindow)\n        self.centralwidget.setObjectName(u\"centralwidget\")\n        self.centralwidget.setStyleSheet(u\"/*Globals*/\\n\"\n\"QLabel{\\n\"\n\"\tfont: 9pt \\\"JetBrains Mono\\\";\\n\"\n\"\tcolor: grey;\\n\"\n\"}\\n\"\n\"\\n\"\n\"/*Frames*/\\n\"\n\"#mainFrame{\\n\"\n\"\tbackground-color:  transparent;\\n\"\n\"}\\n\"\n\"\\n\"\n\"#centerFrame{\\n\"\n\"\tfont: 9pt \\\"JetBrains Mono\\\";\\n\"\n\"\tbackground-color:  #2F343F;\\n\"\n\"\tborder-radius: 10px;\\n\"\n\"}\\n\"\n\"\\n\"\n\"#searchBarFrame{\\n\"\n\"\tborder-radius: 10px;\\n\"\n\"}\\n\"\n\"\\n\"\n\"/*Objects*/\\n\"\n\"#searchBar{\\n\"\n\"\tbackground-color: #262A32;\\n\"\n\"\tborder-radius: 5px;\\n\"\n\"\tcolor:  #A0A0A0;\\n\"\n\"}\\n\"\n\"\\n\"\n\"#settingsBtn{\\n\"\n\"\timage: url(:/Icons/icons/icon_settings.png);\\n\"\n\"\tbackground-color: transparent;\\n\"\n\"\tborder: none;\\n\"\n\"}\\n\"\n\"\\n\"\n\"#clipsListWidget{\\n\"\n\"\tbackground-color: transparent;\\n\"\n\"\tcolor:  #A0A0A0;\\n\"\n\"}\\\\\\n\"\n\"\\n\"\n\"\\n\"\n\"\\n\"\n\"\\n\"\n\"\")\n        self.verticalLayout = QVBoxLayout(self.centralwidget)\n        self.verticalLayout.setSpacing(20)\n        self.verticalLayout.setObjectName(u\"verticalLayout\")\n        self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n        self.searchBarFrame = QFrame(self.centralwidget)\n        self.searchBarFrame.setObjectName(u\"searchBarFrame\")\n        self.searchBarFrame.setMinimumSize(QSize(0, 35))\n        self.searchBarFrame.setMaximumSize(QSize(16777215, 35))\n        self.searchBarFrame.setStyleSheet(u\"#searchBarFrame{\\n\"\n\"\tbackground-color: #536D79;\\n\"\n\"}\")\n        self.searchBarFrame.setFrameShape(QFrame.StyledPanel)\n        self.searchBarFrame.setFrameShadow(QFrame.Raised)\n        self.horizontalLayout = QHBoxLayout(self.searchBarFrame)\n        self.horizontalLayout.setSpacing(6)\n        self.horizontalLayout.setObjectName(u\"horizontalLayout\")\n        self.horizontalLayout.setContentsMargins(6, 0, 0, 0)\n        self.magnifiyingGlassLabel = QLabel(self.searchBarFrame)\n        self.magnifiyingGlassLabel.setObjectName(u\"magnifiyingGlassLabel\")\n        self.magnifiyingGlassLabel.setMinimumSize(QSize(15, 0))\n        self.magnifiyingGlassLabel.setMaximumSize(QSize(15, 16777215))\n        self.magnifiyingGlassLabel.setStyleSheet(u\"image: url(:/Icons/icons/icon_magnifying.png);\\n\"\n\"color: #E1E4E7;\")\n\n        self.horizontalLayout.addWidget(self.magnifiyingGlassLabel, 0, Qt.AlignLeft)\n\n        self.searchBar = QLineEdit(self.searchBarFrame)\n        self.searchBar.setObjectName(u\"searchBar\")\n        self.searchBar.setMinimumSize(QSize(300, 28))\n        self.searchBar.setMaximumSize(QSize(600, 28))\n        self.searchBar.setStyleSheet(u\"QLineEdit{\\n\"\n\"\tbackground-color: transparent;\\n\"\n\"\tselection-background-color: #4C566A;\\n\"\n\"}\")\n        self.searchBar.setAlignment(Qt.AlignLeading|Qt.AlignLeft|Qt.AlignVCenter)\n\n        self.horizontalLayout.addWidget(self.searchBar)\n\n        self.horizontalSpacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)\n\n        self.horizontalLayout.addItem(self.horizontalSpacer)\n\n\n        self.verticalLayout.addWidget(self.searchBarFrame)\n\n        self.centerFrame = QFrame(self.centralwidget)\n        self.centerFrame.setObjectName(u\"centerFrame\")\n        self.centerFrame.setStyleSheet(u\"\")\n        self.centerFrame.setFrameShape(QFrame.StyledPanel)\n        self.centerFrame.setFrameShadow(QFrame.Raised)\n        self.verticalLayout_3 = QVBoxLayout(self.centerFrame)\n        self.verticalLayout_3.setSpacing(0)\n        self.verticalLayout_3.setObjectName(u\"verticalLayout_3\")\n        self.verticalLayout_3.setContentsMargins(6, 6, 6, 0)\n        self.clipsListWidget = QListWidget(self.centerFrame)\n        self.clipsListWidget.setObjectName(u\"clipsListWidget\")\n        self.clipsListWidget.setMaximumSize(QSize(16777215, 16777215))\n        self.clipsListWidget.setStyleSheet(u\"QListView{\\n\"\n\"\tborder: none;\\n\"\n\"}\\n\"\n\"QListView::item:selected{\\n\"\n\"\tbackground-color:  rgba(76, 86, 106, 125);\\n\"\n\"}\\n\"\n\"\")\n\n        self.verticalLayout_3.addWidget(self.clipsListWidget)\n\n        self.bottomFrame = QFrame(self.centerFrame)\n        self.bottomFrame.setObjectName(u\"bottomFrame\")\n        self.bottomFrame.setMinimumSize(QSize(25, 25))\n        self.bottomFrame.setMaximumSize(QSize(1000000, 15))\n        self.bottomFrame.setStyleSheet(u\"\")\n        self.bottomFrame.setFrameShape(QFrame.StyledPanel)\n        self.bottomFrame.setFrameShadow(QFrame.Raised)\n        self.horizontalLayout_2 = QHBoxLayout(self.bottomFrame)\n        self.horizontalLayout_2.setObjectName(u\"horizontalLayout_2\")\n        self.horizontalLayout_2.setContentsMargins(0, 0, 3, 3)\n        self.horizontalSpacer_2 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)\n\n        self.horizontalLayout_2.addItem(self.horizontalSpacer_2)\n\n        self.settingsBtn = QPushButton(self.bottomFrame)\n        self.settingsBtn.setObjectName(u\"settingsBtn\")\n        self.settingsBtn.setMinimumSize(QSize(15, 15))\n        self.settingsBtn.setMaximumSize(QSize(15, 15))\n        self.settingsBtn.setCursor(QCursor(Qt.PointingHandCursor))\n\n        self.horizontalLayout_2.addWidget(self.settingsBtn)\n\n\n        self.verticalLayout_3.addWidget(self.bottomFrame)\n\n\n        self.verticalLayout.addWidget(self.centerFrame)\n\n        MainWindow.setCentralWidget(self.centralwidget)\n\n        self.retranslateUi(MainWindow)\n\n        QMetaObject.connectSlotsByName(MainWindow)\n    # setupUi\n\n    def retranslateUi(self, MainWindow):\n        MainWindow.setWindowTitle(QCoreApplication.translate(\"MainWindow\", u\"MainWindow\", None))\n        self.magnifiyingGlassLabel.setText(\"\")\n        self.searchBar.setPlaceholderText(QCoreApplication.translate(\"MainWindow\", u\"Search...\", None))\n        self.settingsBtn.setText(\"\")\n    # retranslateUi\n\n", "date": "20/01/2023, 02:51:30"}, "83": {"id": "af50c9b6-0df5-4900-8dde-dc9abed80c99", "type": "text", "content": "setItemSelected", "date": "20/01/2023, 03:01:08"}, "84": {"id": "c000faff-77e4-462f-ba85-fb2993bb7190", "type": "text", "content": "self.appendItem(clipData)", "date": "20/01/2023, 03:02:33"}, "85": {"id": "d1f63961-8394-4f03-be72-52e08b9d5efd", "type": "text", "content": "\t\tself._parent.ui.clipsListWidget.setFocus()\n", "date": "20/01/2023, 03:04:17"}, "86": {"id": "65070cbd-e953-4bee-bada-8ab7692e8f65", "type": "text", "content": "self.appendItem(clipData)", "date": "20/01/2023, 03:04:28"}, "98": {"id": "7221ae60-b9ce-4fba-ba82-5ec390fe3931", "type": "text", "content": "- [ ] TODO: Implement QuickTrigger (for recent clipboard)\n", "date": "20/01/2023, 03:12:26"}, "99": {"id": "a5321042-f44b-43f1-ad43-3db9d64569d0", "type": "text", "content": "- [ ] TODO: Implement ShortKey (Paste preset entries)\n", "date": "20/01/2023, 03:12:55"}, "100": {"id": "91281816-c475-4c62-9557-d8434226ca04", "type": "text", "content": "\tdef saveDataBase(self):  pass\n", "date": "20/01/2023, 03:13:33"}, "101": {"id": "7d4732b0-b189-4470-ad5f-f8cc3bc2adfb", "type": "text", "content": "PATH_TO_DB", "date": "20/01/2023, 03:13:51"}, "159": {"id": "9d2fce79-42fe-4bab-a594-5eccf2f25d41", "type": "text", "content": "appendItem", "date": "21/01/2023, 21:49:22"}, "167": {"id": "f124444b-1050-4322-b04b-b737af77bb7b", "type": "text", "content": "\t\tprint(r\"\")\n", "date": "21/01/2023, 21:50:28"}, "168": {"id": "60806dfc-b4a7-4053-a25f-2887515c3338", "type": "text", "content": "PATH_TO_DB", "date": "21/01/2023, 21:50:40"}, "169": {"id": "a272d318-7f1a-4f5e-a767-42b87c667de4", "type": "text", "content": "appendItem", "date": "21/01/2023, 21:50:46"}, "170": {"id": "8aa23441-800e-4170-844e-6bb607db7a61", "type": "text", "content": "appendItem\n", "date": "21/01/2023, 21:50:49"}, "171": {"id": "9c029f22-2217-4a30-ad05-fa37f7b7b505", "type": "text", "content": "\tdef saveDataBase(self):  pass\n", "date": "21/01/2023, 21:50:53"}, "172": {"id": "ef6abde5-30f2-4a97-a7f5-321a04adf3b0", "type": "text", "content": "PATH_TO_DB", "date": "21/01/2023, 21:51:38"}, "173": {"id": "04309832-1899-47ab-bd7f-471b180296b3", "type": "text", "content": "appendItem", "date": "21/01/2023, 21:51:44"}, "174": {"id": "78103af3-e78f-4efb-9bba-c999c91dedec", "type": "text", "content": "\t\tif cmd == \"z\": self.itemClipActivatedCallback(self.ui.clipsListWidget.item(1)) if self.ui.clipsListWidget.count() > 1 else None\n", "date": "21/01/2023, 21:56:54"}, "175": {"id": "9623b147-5119-489e-b160-b45f7c9b002a", "type": "text", "content": "appendItem", "date": "21/01/2023, 21:57:16"}, "176": {"id": "122062c1-6d58-46a8-90bd-e8a5e1ab502e", "type": "text", "content": "\"ClipPy - Notifier\",", "date": "21/01/2023, 21:58:38"}, "177": {"id": "7920ba0d-a9c5-4a4c-8e88-b354d9f9f395", "type": "text", "content": "\t\tprint(\"Hidden\")\n", "date": "21/01/2023, 21:59:29"}, "178": {"id": "44701b99-964b-45cb-a72e-5dd0ef73a915", "type": "text", "content": "\t\tprint(\"Shown\")\n", "date": "21/01/2023, 21:59:30"}, "179": {"id": "afdccfc1-fcf1-48b7-8614-2a8b366f44fc", "type": "text", "content": "appendItem", "date": "21/01/2023, 22:00:42"}, "180": {"id": "c5a82def-bdb5-41df-ab0c-363477ad0f33", "type": "text", "content": "this is cool\n", "date": "21/01/2023, 22:20:54"}, "181": {"id": "2c2bbeb9-2b7b-4576-ba48-92e8e59ed0cf", "type": "text", "content": "hello\n", "date": "21/01/2023, 22:21:05"}, "182": {"id": "402dda73-957d-484a-bead-5f9f5d74dc3a", "type": "text", "content": "hell\n", "date": "21/01/2023, 22:23:41"}, "183": {"id": "b2d9c501-1871-4a66-a65e-0672fb5da068", "type": "text", "content": "look lmao\n", "date": "21/01/2023, 22:24:35"}, "184": {"id": "76a265ea-76d5-49ec-8762-1244161d14e9", "type": "text", "content": "\t\tself.ItemManager.gotToFirstVisibleItem()\n", "date": "21/01/2023, 22:25:37"}, "185": {"id": "8ccbc207-e87b-40d4-917c-f4fded0d8114", "type": "text", "content": "def itemOnTop(self, content):\n\t\ttopItem = self._caller.ui.clipsListWidget.item(0)\n\t\ttopItemContent = self.getItemContent(topItem)\n\t\treturn content == topItemContent", "date": "21/01/2023, 22:27:29"}, "186": {"id": "8ea38a1a-92a1-458b-8148-ff30e5c4d7ee", "type": "text", "content": "visibleItemSelected", "date": "21/01/2023, 22:28:46"}, "187": {"id": "1eee45f3-e91b-4019-b70d-c4242542aa32", "type": "text", "content": "self.visibleItemSelected():", "date": "21/01/2023, 22:29:37"}, "188": {"id": "1702f72c-0c5c-4062-a5cc-7b10a1fe0ccc", "type": "text", "content": "hell\n", "date": "21/01/2023, 22:31:18"}, "189": {"id": "c5aaf0ad-f12c-4e93-a84a-282d93ac5271", "type": "text", "content": "self.visibleItemSelected():", "date": "21/01/2023, 22:31:37"}, "190": {"id": "2de0fbb5-a870-45f0-88ed-8a9043ea5892", "type": "text", "content": "this is cool\n", "date": "21/01/2023, 22:32:05"}, "191": {"id": "3efeb3aa-8de9-4197-bd66-cf6ea305f887", "type": "text", "content": "notification", "date": "21/01/2023, 22:32:10"}, "192": {"id": "c1feece9-10ee-4149-8be3-3b503c1d88f0", "type": "text", "content": "\t\tQShortcut(QKeySequence('Ctrl+Q'), self).activated.connect(self.closeApp)\n", "date": "21/01/2023, 22:32:36"}, "193": {"id": "36d66a3c-ed02-470a-a2ae-16a40a664074", "type": "text", "content": "QKeySequence", "date": "21/01/2023, 22:33:01"}, "194": {"id": "e76742a9-a54a-4e40-b8f4-1da8d74fda31", "type": "text", "content": "removeClipWidgetItem", "date": "21/01/2023, 22:35:02"}, "195": {"id": "753d4c94-43ba-4011-a954-e91bcdbd7085", "type": "text", "content": "lambda: self.removeClipWidgetItem()", "date": "21/01/2023, 22:36:44"}, "196": {"id": "9a7018e1-840c-4eb3-8aad-0400833bd94d", "type": "text", "content": "removeClipWidgetItem", "date": "21/01/2023, 22:37:54"}}}